// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminAuthenticationServiceClient is the client API for AdminAuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAuthenticationServiceClient interface {
	AddPasswordCredentials(ctx context.Context, in *AddPasswordCredentialsRequest, opts ...grpc.CallOption) (*AddPasswordCredentialsResult, error)
}

type adminAuthenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAuthenticationServiceClient(cc grpc.ClientConnInterface) AdminAuthenticationServiceClient {
	return &adminAuthenticationServiceClient{cc}
}

func (c *adminAuthenticationServiceClient) AddPasswordCredentials(ctx context.Context, in *AddPasswordCredentialsRequest, opts ...grpc.CallOption) (*AddPasswordCredentialsResult, error) {
	out := new(AddPasswordCredentialsResult)
	err := c.cc.Invoke(ctx, "/mealeyau.api.authentication.admin.v1.AdminAuthenticationService/AddPasswordCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAuthenticationServiceServer is the server API for AdminAuthenticationService service.
// All implementations must embed UnimplementedAdminAuthenticationServiceServer
// for forward compatibility
type AdminAuthenticationServiceServer interface {
	AddPasswordCredentials(context.Context, *AddPasswordCredentialsRequest) (*AddPasswordCredentialsResult, error)
	mustEmbedUnimplementedAdminAuthenticationServiceServer()
}

// UnimplementedAdminAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAuthenticationServiceServer struct {
}

func (UnimplementedAdminAuthenticationServiceServer) AddPasswordCredentials(context.Context, *AddPasswordCredentialsRequest) (*AddPasswordCredentialsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPasswordCredentials not implemented")
}
func (UnimplementedAdminAuthenticationServiceServer) mustEmbedUnimplementedAdminAuthenticationServiceServer() {
}

// UnsafeAdminAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAuthenticationServiceServer will
// result in compilation errors.
type UnsafeAdminAuthenticationServiceServer interface {
	mustEmbedUnimplementedAdminAuthenticationServiceServer()
}

func RegisterAdminAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AdminAuthenticationServiceServer) {
	s.RegisterService(&AdminAuthenticationService_ServiceDesc, srv)
}

func _AdminAuthenticationService_AddPasswordCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPasswordCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthenticationServiceServer).AddPasswordCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mealeyau.api.authentication.admin.v1.AdminAuthenticationService/AddPasswordCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthenticationServiceServer).AddPasswordCredentials(ctx, req.(*AddPasswordCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAuthenticationService_ServiceDesc is the grpc.ServiceDesc for AdminAuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mealeyau.api.authentication.admin.v1.AdminAuthenticationService",
	HandlerType: (*AdminAuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPasswordCredentials",
			Handler:    _AdminAuthenticationService_AddPasswordCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/authentication/admin/v1/authentication.proto",
}
